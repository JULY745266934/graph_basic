{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/common/Edge.ts","src/common/MyCanvas.ts","src/common/MyGraph.ts","src/common/Rgba.ts","src/index.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Edge","y","this","_x1","x2","_y1","_y2","_x2","x1","y1","y2","_classCallCheck","MyCanvas","buffer","imgData","_imgData","j","data","g","b","_ctx","putImageData","_canvas","width","height","document","getElementById","getContext","createImageData","default","Rgba_1","Edge_1","MyGraph","x","color","_width","_height","Math","round","_buffer","setPixel","Rgba","BLACK","size","xOffset","yOffset","drawPoint","yMax","yMin","xMax","xMin","k","x3","y3","edge1","edge2","edge3","yDis","drawEdge","getX","drawLine","clearBuffer","_r","_g","_b","_a","arguments","undefined","MyCanvas_1","MyGraph_1","Demo","myCanvas","myGraph","drawTriangle","fillBuffer"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class Edge {\r\n    private _x1: number = 0;\r\n    private _y1: number = 0;\r\n\r\n    private _x2: number = 0;\r\n    private _y2: number = 0;\r\n\r\n    public get x1(): number {\r\n        return this._x1;\r\n    }\r\n\r\n    public get y1(): number {\r\n        return this._y1;\r\n    }\r\n\r\n    public get x2(): number {\r\n        return this._x2;\r\n    }\r\n\r\n    public get y2(): number {\r\n        return this._y2;\r\n    }\r\n\r\n    constructor(x1: number, y1: number, x2: number, y2: number) {\r\n\r\n        if (y1 > y2) {\r\n            this._x1 = x2;\r\n            this._y1 = y2;\r\n\r\n            this._x2 = x1;\r\n            this._y2 = y1;\r\n        } else {\r\n            this._x1 = x1;\r\n            this._y1 = y1;\r\n\r\n            this._x2 = x2;\r\n            this._y2 = y2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据Y轴获取边上的x值\r\n     */\r\n    public getX(y: number) {\r\n        return ((this._x1 - this.x2) / (this._y1 - this._y2)) * (y - this._y1) + this._x1;\r\n    }\r\n\r\n    public get yDis() {\r\n        return this._y2 - this._y1;\r\n    }\r\n}","import { Rgba } from \"./Rgba\";\r\n\r\nexport default class MyCanvas {\r\n\r\n    private _canvas: any = null;\r\n    private _ctx: any = null;\r\n    private _imgData: any = null;\r\n\r\n    constructor() {\r\n        this._canvas = document.getElementById(\"myCanvas\");\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n\r\n        this._imgData = this._ctx.createImageData(this.width, this.height);\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._canvas.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._canvas.height;\r\n    }\r\n\r\n    public fillBuffer(buffer: Rgba[]) {\r\n        let imgData = this._imgData;\r\n        for (var i = 0, j = 0; i < imgData.data.length && j < buffer.length; i += 4, j++) {\r\n            imgData.data[i + 0] = buffer[j].r;\r\n            imgData.data[i + 1] = buffer[j].g;\r\n            imgData.data[i + 2] = buffer[j].b;\r\n            imgData.data[i + 3] = buffer[j].a;\r\n        }\r\n        this._ctx.putImageData(imgData, 0, 0);\r\n    }\r\n}","import { Rgba } from \"./Rgba\";\r\nimport { Point } from \"./Point\";\r\nimport { Edge } from \"./Edge\";\r\n\r\nexport default class MyGraph {\r\n    private _buffer: Array<Rgba>;\r\n    private _width: number = 0;\r\n    private _height: number = 0;\r\n\r\n    constructor(width: number, height: number) {\r\n        this._width = width;\r\n        this._height = height;\r\n\r\n        this._buffer = [];\r\n        this.clearBuffer();\r\n    }\r\n\r\n    public get buffer(): Rgba[] {\r\n        return this._buffer;\r\n    }\r\n\r\n    public setPixel(x: number, y: number, color: Rgba) {\r\n        if (x >= this._width || y >= this._height) {\r\n            return;\r\n        }\r\n        x = Math.round(x);\r\n        y = Math.round(y);\r\n        this._buffer[y * this._width + x] = color;\r\n    }\r\n\r\n    public clearBuffer() {\r\n        for (var i = 0; i < this._width; i++) {\r\n            for (var j = 0; j < this._height; j++) {\r\n                this.setPixel(i, j, Rgba.BLACK);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 画点\r\n     * @param x \r\n     * @param y \r\n     * @param color \r\n     * @param size \r\n     */\r\n    public drawPoint(x: number, y: number, color: Rgba, size: number) {\r\n\r\n        for (var i = 0; i < size; i++) {\r\n            for (var j = 0; j < size; j++) {\r\n                this.setPixel(x + i, y + j, color);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  画线\r\n     * @param x1 \r\n     * @param y1 \r\n     * @param x2 \r\n     * @param y2 \r\n     * @param color \r\n     * @param size \r\n     */\r\n    public drawLine(x1: number, y1: number, x2: number, y2: number, color: Rgba, size: number) {\r\n\r\n        let xOffset = x1 - x2;\r\n        let yOffset = y1 - y2;\r\n\r\n        if (xOffset == 0 && yOffset == 0) {\r\n            //点重合\r\n            this.drawPoint(x1, y1, color, size);\r\n        } else if (xOffset == 0) {\r\n            //画竖线\r\n            let yMax = y2;\r\n            let yMin = y1;\r\n            if (y1 > y2) {\r\n                yMax = y1;\r\n                yMin = y2;\r\n            }\r\n\r\n            for (var y = yMin; y < yMax; y += size) {\r\n                this.drawPoint(x1, y, color, size);\r\n            }\r\n\r\n        } else if (yOffset == 0) {\r\n            //画横线\r\n            let xMax = x2;\r\n            let xMin = x1;\r\n\r\n            if (x1 > x2) {\r\n                xMax = x1;\r\n                xMin = x2;\r\n            }\r\n            for (var x = xMin; x < xMax; x += size) {\r\n                this.drawPoint(x, y1, color, size);\r\n            }\r\n        } else {\r\n            //画斜线\r\n            let k = (y2 - y1) / (x2 - x1);\r\n\r\n            if (x1 > x2) {\r\n                for (var x = x2; x < x1; x += size) {\r\n                    var y = k * (x - x2) + y2;\r\n                    this.drawPoint(x, y, color, size);\r\n                }\r\n            } else {\r\n                for (var x = x1; x < x2; x += size) {\r\n                    var y = k * (x - x1) + y1;\r\n                    this.drawPoint(x, y, color, size);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     * 画三角形\r\n     */\r\n    public drawTriangle(\r\n        x1: number, y1: number,\r\n        x2: number, y2: number,\r\n        x3: number, y3: number,\r\n        color: Rgba\r\n    ) {\r\n\r\n        let edge1: Edge = new Edge(x1, y1, x2, y2);\r\n        let edge2: Edge = new Edge(x2, y2, x3, y3);\r\n        let edge3: Edge = new Edge(x3, y3, x1, y1);\r\n\r\n        let size = 1;\r\n        if (edge1.yDis > edge2.yDis && edge1.yDis > edge3.yDis) {\r\n            this.drawEdge(edge2, edge1, color, size);\r\n            this.drawEdge(edge3, edge1, color, size);\r\n        } else if (edge2.yDis > edge1.yDis && edge2.yDis > edge3.yDis) {\r\n            this.drawEdge(edge1, edge2, color, size);\r\n            this.drawEdge(edge3, edge2, color, size);\r\n        } else {\r\n            this.drawEdge(edge1, edge3, color, size);\r\n            this.drawEdge(edge2, edge3, color, size);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param edge1 短的边\r\n     * @param edge2 长的边\r\n     * @param color \r\n     * @param size \r\n     */\r\n    public drawEdge(edge1: Edge, edge2: Edge, color: Rgba, size: number) {\r\n\r\n        for (let y = edge1.y1; y < edge1.y2; y += 1) {\r\n            let x1 = edge1.getX(y);\r\n            let x2 = edge2.getX(y);\r\n            this.drawLine(x1, y, x2, y, color, size);\r\n        }\r\n    }\r\n}","\r\n\r\nexport class Rgba {\r\n    private _r: number;\r\n    private _g: number;\r\n    private _b: number;\r\n    private _a: number;\r\n\r\n    public static BLACK: Rgba = new Rgba(0, 0, 0, 0);\r\n\r\n    public get r(): number {\r\n        return this._r;\r\n    }\r\n\r\n    public get g(): number {\r\n        return this._g;\r\n    }\r\n\r\n    public get b(): number {\r\n        return this._b;\r\n    }\r\n\r\n    public get a(): number {\r\n        return this._a;\r\n    }\r\n\r\n    constructor(r: number = 255, g: number = 255, b: number = 255, a: number = 255) {\r\n        this._r = r;\r\n        this._g = g;\r\n        this._b = b;\r\n        this._a = a;\r\n    }\r\n}","import MyCanvas from \"./common/MyCanvas\";\r\nimport MyGraph from \"./common/MyGraph\";\r\nimport { Rgba } from \"./common/Rgba\";\r\n\r\nclass Demo {\r\n\r\n    constructor() {\r\n        let myCanvas = new MyCanvas();\r\n\r\n        let myGraph: MyGraph = new MyGraph(myCanvas.width, myCanvas.height);\r\n\r\n        //画点\r\n\r\n        //  myGraph.drawPoint(10, 10, new Rgba(255, 0, 0, 255), 2);\r\n\r\n        //画线\r\n        // myGraph.drawLine(0, 0, 10, 20, new Rgba(255, 0, 0, 255), 2);\r\n\r\n        //画三角形\r\n        myGraph.drawTriangle(0, 0, 10, 30, 30, 20, new Rgba(255, 0, 0, 255), 1);\r\n\r\n        myCanvas.fillBuffer(myGraph.buffer);\r\n    }\r\n}\r\n\r\nnew Demo();"]}